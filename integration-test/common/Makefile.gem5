# Common Make targets for simulating MachSuite in gem5.
#
# ALADDIN_HOME needs to be defined as an environment variable.
# The gem5 dependencies are listed as .cpp files for compatibility with gem5.
# To compile them with C code, we need to explicitly use gcc.

.PHONY: gem5 gem5-cpu gem5-accel clean-gem5

GEM5_SRCS = aladdin_sys_connection.cpp aladdin_sys_constants.cpp
GEM5_FULL_SRCS = $(GEM5_SRCS:%=$(ALADDIN_HOME)/gem5/%)

# For the MachSuite harness and support system.
CFLAGS = -Wall -Wno-unused-label -I../../common

# -mno-sse
GEM5_CFLAGS = -O3 -static -mno-80387 -msoft-float \
              -march=nocona -msse -mfpmath=sse \
              -fno-exceptions -fno-inline -std=c11  

INCLUDES += -I$(ALADDIN_HOME)/gem5 -I$(ALADDIN_HOME)/../../util/m5
LFLAGS = -lm -lpthread ../../common/m5op_x86.S
BMARK = $(ACCEL_NAME)

# Builds both standalone CPU version and the HW accelerated version.
gem5: gem5-cpu gem5-accel

# Builds the standalone CPU version only.
gem5-cpu: $(SRCS) $(GEM5_FULL_SRCS)
	@echo Building benchmark $(BMARK) for gem5.
	@$(CC) $(GEM5_CFLAGS) $(CFLAGS) $(GEM5_FULL_SRCS) $(SRCS) $(INCLUDES) -o $(BMARK)-cpu-only $(LFLAGS)
	@$(CC) $(GEM5_CFLAGS) $(CFLAGS) $(GEM5_FULL_SRCS) dummy_traffic.c $(INCLUDES) -o dummy_traffic $(LFLAGS)
	@$(CC) $(GEM5_CFLAGS) $(CFLAGS) $(GEM5_FULL_SRCS) matrix_mult.c $(INCLUDES) -o matrix_mult $(LFLAGS)

# Builds the gem5 version with HW acceleration turned on.
gem5-accel: $(SRCS) $(GEM5_FULL_SRCS)
	@echo Building benchmark $(BMARK) for gem5 with HW acceleration.
	@$(CC) $(GEM5_CFLAGS) $(CFLAGS) -DGEM5_HARNESS $(SRCS) $(GEM5_FULL_SRCS) $(INCLUDES) -o $(BMARK) $(LFLAGS)

clean-gem5:
	rm -rf $(BMARK)-gem5 $(BMARK)-gem5-accel

